#!/usr/bin/env python -i
import os
from pprint import pprint
import sys


# Path to Homebrew's site-packages
sys.path.append("/usr/local/lib/python2.7/site-packages/")

from twosheds import Shell

import git
from helpers import working_directory
from sh import sh


HUMAN_ALIASES = {
    'copy': 'cp',
    'edit': '$EDITOR',
    'del': 'rm',
    'delete': 'rm',
    'goto': 'cd',
    'list': 'ls',
    'move': 'mv',
    'now': 'date',
    'whereami': 'pwd',
    'unixtime': 'date +$%s',
}

UTILITY_ALIASES = {
    # more intuitive xargs
    'args': 'xargs -0',
    # grep recursively. show line numbers and one line of context on either
    # side
    'f': 'grep -rn -C 1',
    # find name
    'fn': 'find . -name',
    # Remove all local merged branches
    'gitclean': '|'.join(['git branch --merged',
                          'grep --invert-match ^\*',
                          'sed "s/^ *//"',  # trim leading whitespace
                          'xargs -n 1 git branch --delete']),
    # Remove all remote merged branches
    'gitcleanremote': '|'.join(['git branch --remotes --merged',
                                'grep --invert-match ^\*',
                                'sed "s/^ *//"',  # trim leading whitespace
                                'xargs -n 1 git push origin :']),
    # list filenames by relative path
    'lr': 'find . -type f | sed "s#^./##',
    # check connection speed
    'pingme': 'ping google.com',
    'vimrc': '$EDITOR ~/.vimrc',
    'checkout': 'git checkout',
}

SHORT_ALIASES = {
    '..': 'cd ..',
    '...': 'cd ../..',
    'c': 'cd',
    'e': '$EDITOR',
    'g': 'git',
    'gs': "git status -s",
    'l': 'ls',
    # show hidden files
    'la': 'ls -a',
    # show file metadata and symlinks pointers
    'll': 'ls -l',
    'v': '$EDITOR',
}

MASK_ALIASES = {
    # ask before overriding files
    'cp': 'cp -i',
    # sort variables
    'env': 'env | xargs -0 | sort',
    # color output
    'grep': 'grep --color=auto',
    # color output
    'ls': 'ls -G',
}


def get_aliases():
    return dict(HUMAN_ALIASES.items()
                + UTILITY_ALIASES.items()
                + SHORT_ALIASES.items()
                + MASK_ALIASES.items()
                )

HOME = os.environ['HOME']

# Extend the existing PATH with any PATH segments we need, which aren't already
# there.
OLD_PATH = os.environ['PATH'].split(':')
NEW_PATH = sorted({
    "%s/local/bin" % HOME,
    "%s/bin" % HOME,
    "/usr/local/bin",
    "/usr/bin",
    "/usr/sbin",
    "/usr/X11R6/bin",
    "/bin",
    "/sbin",
    "/usr/local/share/npm/bin",
    } - set(OLD_PATH),
    # NOTE: This assumes that path order is best determined by depth in the
    # file system, which is reasonable, but could perhaps lead to bugs.
    key=lambda path: -path.count('/')
)
os.environ['PATH'] = ":".join(OLD_PATH + NEW_PATH)

PYTHONPATH = [
    "/Users/ceasarbautista/lib/python/",
    "/usr/local/lib/python2.7/site-packages"
]
os.environ['PYTHONPATH'] = ":".join(PYTHONPATH)

# Set architecture flags
os.environ['ARCHFLAGS'] = "-arch x86_64"

os.environ['EDITOR'] = "vim"
os.environ['HOST'] = "$(uname -n)"

os.environ.setdefault('UNAME', "$(uname)")

os.environ['PYTHONSTARTUP'] = "%s/.pythonrc.py" % HOME
os.environ['VISUAL'] = os.environ['EDITOR']

LSCOLORS = [
    'ax',  # directory
    'hx',  # symbolic link
    'cx',
    'dx',
    'bx',
    'eg',
    'ed',
    'ab',
    'ag',
    'ac',
    'ad',
]

os.environ['LSCOLORS'] = "".join(LSCOLORS)

shell = Shell(
    environ=os.environ,
    aliases=get_aliases(),
    echo=True,
    exclude=[r'.*.pyc'],
)


@shell.command("findin")
def find_in(directory, q):
    return shell.eval('mdfind %s -onlyin %s' % (q, directory))


@shell.command("alias")
def alias(*args):
    pprint(shell.aliases)


@shell.before_interaction
def ps1():
    pwd = working_directory(shell.transforms, short=True)
    branch = git.branch()
    ps1 = "%s " % pwd if branch is None else "%s(%s) " % (pwd, branch)
    os.environ["PS1"] = ps1


class Watch(object):
    """
    Execute *commands* if the output of *script* changes.

    This cannot be implemented as a closure, since closures do not give the
    ability to modify bound variables, but ``last_out`` needs to be variable.
    """
    def __init__(self, script, commands):
        self.script = script
        self.commands = commands
        self.last_out = ""

    def __call__(self):
        try:
            out = self.script()
        except ValueError:
            pass
        else:
            if out is not None and out != self.last_out:
                self.last_out = out
                for command in self.commands:
                    shell.eval(command)


watches = [
    # Print Git's status (the current git status, a diffstat, and warnings
    # about whitespace errors) when the git status changes
    Watch(git.status, [
        # Display the git status in the short-format
        "git status --short",
        # Generate a diffstat
        "git diff --stat",
        # Warn if changes introduce whitespace errors
        "git diff --check",
    ]),
    # List Git branches when they change
    Watch(lambda: sh("git branch --no-color 2> /dev/null"), ["git branch -vv"]),
    # List Git stash
    Watch(lambda: sh("git stash list 2> /dev/null"), ["git stash list"]),
    # List files in the current directory when they change
    Watch(lambda: sh("ls"), ["ls"]),
]
for watch in watches:
    shell.before_interaction(watch)

if __name__ == "__main__":
    shell.serve_forever()
