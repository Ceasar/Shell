#!/usr/bin/env python -i
import os
import sys

# Path to Homebrew's site-packages
sys.path.append("/usr/local/lib/python2.7/site-packages/")

import twosheds

import git
from helpers import working_directory
from sh import sh


HUMAN_ALIASES = {
    'copy': 'cp',
    'edit': '$EDITOR',
    'del': 'rm',
    'delete': 'rm',
    'goto': 'cd',
    'list': 'ls',
    'move': 'mv',
    'now': 'date',
    'whereami': 'pwd',
    'unixtime': 'date +$%s',
}

UTILITY_ALIASES = {
    # more intuitive xargs
    'args': 'xargs -0',
    # grep recursively. show line numbers and one line of context on either side
    'f': 'grep -rn -C 1',
    # find name
    'fn': 'find . -name',
     # Remove all local merged branches
    'gitclean': 'git branch --merged | grep -v ^\* | sed "s/^ *//" | xargs -n 1 git accept',
     # Remove all remote merged branches
    'gitcleanremote': 'git branch --merged | grep -v ^\* | sed "s/^ *//" | xargs -n 1 git accept',
    # list filenames by relative path
    'lr': 'find . -type f | sed "s#^./##',
    # check connection speed
    'pingme': 'ping google.com',
    'vimrc': '$EDITOR ~/.vimrc',
}

SHORT_ALIASES = {
    '..': 'cd ..',
    '...': 'cd ...',
    'c': 'cd',
    'e': '$EDITOR',
    'g': 'git',
    'gs': "git status -s",
    'l': 'ls',
    # show hidden files
    'la': 'ls -a',
    # show file metadata and symlinks pointers
    'll': 'ls -l',
    'v': '$EDITOR',
}

MASK_ALIASES = {
    # ask before overriding files
    'cp': 'cp -i',
    # sort variables
    'env': 'env | xargs -0 | sort',
    # color output
    'grep': 'grep --color=auto',
    # color output
    'ls': 'ls -G',
}

def get_aliases():
    return dict(HUMAN_ALIASES.items()
                + UTILITY_ALIASES.items()
                + SHORT_ALIASES.items())



HOME = os.environ['HOME']
PATH = ["%s/local/bin" % HOME,
        "%s/bin" % HOME,
        "/usr/local/bin",
        "/usr/bin",
        "/usr/sbin",
        "/usr/X11R6/bin",
        "/bin",
        "/sbin",
        "/usr/local/share/npm/bin",
        ]
os.environ['PATH'] = ":".join(PATH)

PYTHONPATH = [
    "/Users/ceasarbautista/lib/python/",
    "/usr/local/lib/python2.7/site-packages"
]
os.environ['PYTHONPATH'] = ":".join(PYTHONPATH)

# Set architecture flags
os.environ['ARCHFLAGS'] = "-arch x86_64"

os.environ['EDITOR'] = "vim"
os.environ['HOST'] = "$(uname -n)"
os.environ.setdefault('UNAME', "$(uname)")

os.environ['PYTHONSTARTUP'] = "%s/.pythonrc.py" % HOME
os.environ['VISUAL'] = os.environ['EDITOR']

LSCOLORS = [
    'ax',  # directory
    'hx',  # symbolic link
    'cx',
    'dx',
    'bx',
    'eg',
    'ed',
    'ab',
    'ag',
    'ac',
    'ad',
]

os.environ['LSCOLORS'] = "".join(LSCOLORS)


class MyShell(twosheds.Shell):
    last_gs = ""

    def __init__(self, *args, **kwargs):
        super(MyShell, self).__init__(*args, **kwargs)
        self.transforms.insert(
            1,
            twosheds.transform.AliasTransform(MASK_ALIASES)
        )

shell = MyShell(
    environ=os.environ,
    aliases=get_aliases(),
    echo=True,
    exclude=[r'.*.pyc'],
)


@shell.command("findin")
def find_in(directory, q):
    return shell.eval('mdfind %s -onlyin %s' % (q, directory))


@shell.before_request
def ps1():
    pwd = working_directory(shell.transforms, short=True)
    branch = git.branch()
    ps1 = "%s " % pwd if branch is None else "%s(%s) " % (pwd, branch)
    os.environ["PS1"] = ps1


last_ls = ""


@shell.before_request
def ls():
    """Automatically run ``ls`` if the output changes."""
    global last_ls
    ls = sh("ls")
    if ls != last_ls:
        last_ls = ls
        shell.eval("ls")

last_gs = ""


@shell.before_request
def gs():
    """Automatically run ``git status`` if the output changes."""
    global last_gs
    gs = git.status()
    if gs is not None and gs != last_gs:
        last_gs = gs
        shell.eval("git status -s")

if __name__ == "__main__":
    shell.interact()
