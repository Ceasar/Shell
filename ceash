#!/usr/bin/env python
import os
from subprocess import check_output, CalledProcessError

import twosheds


HUMAN_ALIASES = {
    'copy': 'cp',
    # ask before overriding files
    'cp': 'cp -i',
    # sort variables
    'env': 'env | xargs -0 | sort',
    'del': 'rm',
    'delete': 'rm',
    'goto': 'cd',
    # color output
    'grep': 'grep --color=auto',
    'list': 'ls',
    # color output
    'ls': 'ls -G',
    'move': 'mv',
    'now': 'date',
    'whereami': 'pwd',
    'unixtime': 'date +$%s',
}

UTILITY_ALIASES = {
    # more intuitive xargs
    'args': 'xargs -0',
    # grep recursively. show line numbers and one line of context on either side
    'f': 'grep -rn -C 1',
    # find name
    'fn': 'find . -name',
     # Remove all local merged branches
    'gitclean': 'git branch --merged | grep -v ^\* | sed "s/^ *//" | xargs -n 1 git accept',
     # Remove all remote merged branches
    'gitcleanremote': 'git branch --merged | grep -v ^\* | sed "s/^ *//" | xargs -n 1 git accept',
    # list filenames by relative path
    'lr': 'find . -type f | sed "s#^./##',
    # check connection speed
    'pingme': 'ping google.com',
    'vimrc': '$EDITOR ~/.vimrc',
}

SHORT_ALIASES = {
    '..': 'cd ..',
    '...': 'cd ...',
    'c': 'cd',
    'e': '$EDITOR',
    'g': 'git',
    'gs': "git status",
    'l': 'ls -G',
    # show hidden files
    'la': 'ls -aG',
    # show file metadata and symlinks pointers
    'll': 'ls -lG',
    'v': '$EDITOR',
}

def get_aliases():
    return dict(HUMAN_ALIASES.items()
                + UTILITY_ALIASES.items()
                + SHORT_ALIASES.items())

os.environ['EDITOR'] = "vim"
os.environ['HOST'] = "$(uname -n)"
os.environ.setdefault('UNAME', "$(uname)")

PATH = ["$HOME/local/bin",
        "$HOME/bin",
        "/usr/local/bin",
        "/usr/bin",
        "/usr/sbin",
        "/usr/X11R6/bin",
        "/bin",
        "/sbin",
        ]
os.environ['PATH'] = ":".join(PATH)
# NOTE: for some reason $HOME does not get expanded
os.environ['PYTHONSTARTUP'] = os.environ['HOME'] + "/.pythonrc.py"
os.environ['VISUAL'] = os.environ['EDITOR']


class MyShell(twosheds.Shell):
    last = ""
    last_gs = ""

    @property
    def git_branch(self):
        try:
            return check_output("git symbolic-ref --short HEAD 2> /dev/null",
                                shell=True).strip()
        except CalledProcessError:
            return None

    @property
    def prompt(self):
        pwd = os.getcwd().replace(os.environ["HOME"], "~")
        branch = self.git_branch
        if branch is not None:
            return "%s(%s) " % (pwd, branch)
        else:
            return pwd + " "

    def auto_gs(self):
        try:
            gs = check_output("git status 2> /dev/null", shell=True)
        except CalledProcessError:
            pass
        else:
            if gs != self.last_gs:
                self.last_gs = gs
                self.eval("git status")

    def auto_ls(self):
        ls = check_output("ls", shell=True)
        if ls != self.last:
            self.last = ls
            self.eval("ls")

    def read(self):
        self.auto_gs()
        self.auto_ls()
        return super(MyShell, self).read()

shell = MyShell(aliases=get_aliases(), echo=True, exclude=[r'.*.pyc'])
shell.interact("Hello!")
